package giis.demo.tkrun;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;


import javax.swing.JButton;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import giis.demo.util.ApplicationException;
import giis.demo.util.SwingUtil;
import giis.demo.util.Util;

public class SecretaryController {
	
	private SecretaryModel model;
	private PaymentsView viewPayments;
	private CoursesView viewCourses;
	private String lastSelectedKey=""; //remembers the last selected row to show info about it
	
	//Constructors (one for each view)
	public SecretaryController(SecretaryModel m, PaymentsView v) {
		this.model = m;
		this.viewPayments = v;
		//no model initialization but the view
		this.initViewPayments();
	}
	
	public SecretaryController(SecretaryModel m, CoursesView v) {
		this.model = m;
		this.viewCourses = v;
		//no model initialization but the view
		this.initViewCourses();
	}
	
	//init methods (one for each view)
	public void initViewPayments() {
		//Sets today's date to the current value (TODAY)
		LocalDate localdate = LocalDate.now();
		Date today = Date.from(localdate.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant());
		viewPayments.setTodayDate(Util.dateToIsoString(today));
		
		this.getListPayments();
		
		//Opens the window (instead of the main() generated by WindowBuilder)
		viewPayments.getFrame().setVisible(true); 
	}
	
	public void initViewCourses() {
		this.getListCourses();
		
		//Opens the window (instead of the main() generated by WindowBuilder)
		viewCourses.getFrame().setVisible(true); 
	}
	
	
	//Controller initialization (payments)
	public void initControllerPayments() {
		
		//recharge the data of the table after a correct inscription
		viewPayments.getBtnRefresh().addActionListener(e -> SwingUtil.exceptionWrapper(() -> getListPayments()));
		
		viewPayments.getTablePayments().addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				int sel = viewPayments.getTablePayments().getSelectedRow();
				if (viewPayments.getTablePayments().isRowSelected(sel)) {
				    viewPayments.getTFAmount().setEnabled(true);
				    viewPayments.getTFDate().setEnabled(true);
				    viewPayments.getTFHour().setEnabled(true);
				}
			}
		});
		
		JButton btnCancel = viewPayments.getBtnCancel();
		btnCancel.addMouseListener(new MouseAdapter() {
		    @Override
		    public void mouseClicked(MouseEvent e) {
		        viewPayments.getFrame().dispose();//Close the window
		    }
		});
		
		JButton btnConfirm = viewPayments.getBtnConfirm();
		btnConfirm.addMouseListener(new MouseAdapter() {
		    @Override
		    public void mouseClicked(MouseEvent e) {
		        //A dialog appears, it can be a right or a wrong registration
		    	SwingUtil.exceptionWrapper(() -> manageConfirm());
		    }
		});
	}
	
	//Controller initialization (courses)
	public void initControllerCourses() {
		viewCourses.getTableCourses().addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				SwingUtil.exceptionWrapper(() -> updateDetailCourses());
			}
		});
		
		JButton btnCancel = viewCourses.getBtnOK();
		btnCancel.addMouseListener(new MouseAdapter() {
		    @Override
		    public void mouseClicked(MouseEvent e) {
		        viewCourses.getFrame().dispose();//Close the window
		    }
		});
	}
	
	
	//Method listing all the pending payments coming from the POJO object
	public void getListPayments() {
		List<PaymentDisplayDTO> payments = model.getListPayments();
		DefaultTableModel tmodel = SwingUtil.getTableModelFromPojos(payments, new String[] {"course_name", "reg_name", "reg_surnames", "reg_email", "course_fee", "reg_date","reg_time"});
		Object[] newHeaders = {"Course name", "Professional name", "Professional surnames", "email", "Course fee", "Date of registration", "Hour of registration"};
		tmodel.setColumnIdentifiers(newHeaders);
		viewPayments.getTablePayments().setModel(tmodel);
		
		SwingUtil.autoAdjustColumns(viewPayments.getTablePayments());
	}
	
	//Method listing all the courses coming from the POJO object
	public void getListCourses() {
		List<CourseDisplayDTO> courses = model.getListCourses();
		DefaultTableModel tmodel = SwingUtil.getTableModelFromPojos(courses, new String[] {"course_id","course_name", "course_state", "course_start_period", "course_end_period", "total_places", "available_places","course_date","course_time"});
		Object[] newHeaders = {"Course id", "Course name", "Status", "Start of enrollement period", "End of enrollement period", "Total places", "Places left", "Course date", "Course starting time"};
		tmodel.setColumnIdentifiers(newHeaders);
		viewCourses.getTableCourses().setModel(tmodel);
		//Hide the column of the course id (the user doesn't want to see it)
		TableColumnModel columnModel = viewCourses.getTableCourses().getColumnModel();
		TableColumn column = columnModel.getColumn(0);
		columnModel.removeColumn(column);
		
		SwingUtil.autoAdjustColumns(viewCourses.getTableCourses());
	}
	
	
	//Updates the additional info grid depending on the selection of the course (upper table)
	public void updateDetailCourses() {
		//Obtains the selected key (the id of the selected row in this case)
		this.lastSelectedKey=SwingUtil.getSelectedKey(viewCourses.getTableCourses());
		int courseId = Integer.parseInt(this.lastSelectedKey);
		
		//Course details
		CourseInfoDisplayDTO course = model.getCourse(courseId);
		DefaultTableModel tmodel=SwingUtil.getRecordModelFromPojo(course, new String[] {"objectives", "description", "place", "teacher_name","teacher_surnames"});
		Object[] newHeaders = {"Objectives", "Contents", "Place", "Teacher name", "Teacher surnames"};
		for(int i = 0; i < 5; i++) {
			tmodel.setValueAt(newHeaders[i],i,0);
		}
		viewCourses.getTableMore().setModel(tmodel);
		SwingUtil.autoAdjustColumns(viewCourses.getTableMore());
	}
	
	
	/*
	* Method encharged of all the database insertions and 
	* messages when registering a new payment
	*/ 
	public void manageConfirm() {
		//Initializations
		String strquant = "";
		String date = "";
		String hour = "";
		
		//Initializations preventing exceptions
		if (viewPayments.getTFAmount().getText().isEmpty()) {
			throw new ApplicationException("Be careful, you must fill the amount gap");
		} else strquant = viewPayments.getTFAmount().getText();
		int quant = Integer.parseInt(strquant);
		
		if (viewPayments.getTFDate().getText().isEmpty()) {
			throw new ApplicationException("Be careful, you must fill the date gap");
		} else date = viewPayments.getTFDate().getText();
		
		if (viewPayments.getTFHour().getText().isEmpty()) {
			throw new ApplicationException("Be careful, you must fill the hour gap");
		} else hour = viewPayments.getTFHour().getText();
		
		
		//Get the fee of the selected course
		int index = viewPayments.getTablePayments().getSelectedRow();//index of the selected row
		int fee = -1;
		String courseName = "";
		String regDate = "";
		String regName = "";
		String regHour = "";
		if (index >=0) {//No errors if the fields are not selected
			fee = model.getListPayments().get(index).getCourse_fee();
			courseName = model.getListPayments().get(index).getCourse_name();
			regDate = model.getListPayments().get(index).getReg_date();
			regName = model.getListPayments().get(index).getReg_name();
			regHour = model.getListPayments().get(index).getReg_time();
		}
		
		//Get the course places, depending on which course the registration is associated
		int regid = model.getRegId(courseName, Util.isoStringToDate(regDate), regName).getReg_id();
		int places = model.getPlacesCourse(regid);
		
		//Get a correct id (the last one + 1)
		int payid = model.getLastPaymentId();
		payid++;
		
		boolean days = model.differenceDatesHour(Util.isoStringToDate(regDate), Util.isoStringToDate(date), Util.isoStringToHour(regHour), Util.isoStringToHour(hour));
		
		//All the different possibilities according to courses
		if (quant == fee && days) {//CORRECT
			model.validateDate(Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
			SwingUtil.showMessage("The professional has been correctly registered to the course and he has been assigned a place", 
					"Correct registration of the payment.", 1);
			model.updateTable(payid, quant, Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
		} else if (quant == fee && places > 0 && !days) {//Wrong, but registered (
			model.validateDate(Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
			SwingUtil.showMessage("The professional has been correctly registered to the course and he has been assigned a place.\n"
					+ "The payment has been done more than 48 hours after the registration but there where available places in the course", 
					"Correct registration of the payment.", 1);
			model.updateTable(payid, quant, Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
		} else if (quant > fee && days) {//Wrong, but registered (MORE MONEY)
			model.validateDate(Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
			SwingUtil.showMessage("The professional has been correctly registered to the course and he has been assigned a place.\n"
					+ "In addition, COIIPA must give back the professional the additional money he has paid: " + Integer.toString(quant - fee) + " â‚¬", 
					"Correct registration of the payment.", 1);
			model.updateTable(payid, quant, Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
		} else if (quant > fee && places > 0 && !days) {//Wrong, but registered (MORE MONEY AND DAYS)
			model.validateDate(Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
			SwingUtil.showMessage("The professional has been correctly registered to the course and he has been assigned a place.\n"
					+ "The payment has been done more than 48 hours after the registration but there where available places."
					+ "In addition, COIIPA must give back the professional the additional money he has paid: " + Integer.toString(quant - fee) + " â‚¬", 
					"Correct registration of the payment.", 1);
			model.updateTable(payid, quant, Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
		} else if (quant < fee) {
			model.validateDate(Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
			SwingUtil.showMessage("The professional cannot be assigned a place for the course. Please, warn her/him to pay the whole fee.", "Wrong data", 0);//WRONG
		} else if (quant >= fee && !days && places == 0) {
			model.validateDate(Util.isoStringToDate(date), Util.isoStringToHour(hour), regid);
			SwingUtil.showMessage("The professional cannot be assigned a place for the course. He/she has paid more than 2 days after the registration date "
					+ "and at this moment there are no free places.","Wrong data",0);
		}
	}
}
	
